library("caret")
varImp(am.data)
am.pred = predict(am.data, newdata = testing_am , type = 'response')
print(am.pred)
# value = 1 is fully automatic
#accuracy of model
am.pred_num <- ifelse(am.pred >0.5 , 1 , 0)
am.pred_act <- factor (am.pred_num , levels = c (0,1))
am.pred_avi <- testing_am$am
mean(am.pred_act == am.pred_avi)
table(am.pred_act , am.pred_avi)
am.data = glm (formula = am ~ cyl + hp + wt , family = binomial, data = input)
print(summary(am.data))
mtcars
#########################333
#logistic regression
#selecting some cars from mt=cars
input <- mtcars[,c("am" , "hp" , "wt" , "cyl", "drat")]
head(input)
#am.data  = glm (formula = am ~ hp + wt , family = binomial, data = training_am )
am.data = glm (formula = am ~ cyl + hp + wt +drat, family = binomial, data = training_am)
#########################333
#logistic regression
#selecting some cars from mt=cars
input <- mtcars[,c("am" , "hp" , "wt" , "cyl", "drat")]
head(input)
training_am <- input[1:20,]
testing_am <- input [21:32,]
am.data = glm (formula = am ~ cyl + hp + wt + drat , family = binomial, data = input)
print(summary(am.data))
am.data = glm (formula = am ~ cyl + hp + wt + drat , family = binomial, data = input)
#am.data  = glm (formula = am ~ hp + wt , family = binomial, data = training_am )
am.data = glm (formula = am ~ cyl + hp + wt + drat, family = binomial, data = training_am)
print(summary(am.data))
#########################333
#logistic regression
#selecting some cars from mt=cars
input <- mtcars[,c("am" , "hp" , "wt" , "cyl", "drat")]
head(input)
training_am <- input[1:20,]
testing_am <- input [21:32,]
am.data = glm (formula = am ~ cyl + hp + wt + drat , family = binomial, data = input)
print(summary(am.data))
am.data = glm (formula = am ~ cyl + hp + wt + drat , family = binomial, data = input)
#########################333
#logistic regression
#selecting some cars from mt=cars
input <- mtcars[,c("am" , "hp" , "wt" , "cyl", "drat")]
am.data = glm(formula = am ~ cyl + hp + wt + drat , family = binomial, data = input)
am.data = glm(formula = am ~ hp + wt + drat , family = binomial, data = input)
print(summary(am.data))
#########################333
#logistic regression
#selecting some cars from mt=cars
input <- mtcars[,c("am" , "hp" , "wt" , "drat")]
am.data = glm(formula = am ~ . , family = binomial, data = input)
am.data = glm(formula = am ~ . , family = binomial, data = input)
#########################333
#logistic regression
#selecting some cars from mt=cars
input <- mtcars[,c("am" , "hp" , "wt" , "cyl", "drat")]
am.data = glm(formula = am ~ cyl + hp + wt + drat , family = binomial, data = input)
am.data = glm(formula = am ~ cyl + hp + wt + drat , family = binomial, data = input,maxit = 100)
am.data = glm(formula = am ~ cyl + hp + wt + drat , family = 'binomial', data = input,maxit = 100)
training_am <- input[1:20,]
testing_am <- input [21:32,]
split = sample.split( input$am, SplitRatio= 0.8)
split = sample.split( input$am, SplitRatio= 0.8)
training_am= subset(input, split == TRUE)
library(caTools)
split = sample.split( input$am, SplitRatio= 0.8)
training_am= subset(input, split == TRUE)
testing_am= subset(input, split == FALSE)
am.data = glm(formula = am ~ cyl + hp + wt + drat , family = 'binomial', data = training_am,maxit = 100)
print(summary(am.data))
am.data = glm(formula = am ~ cyl + hp + wt + drat , family = 'binomial', data = input,maxit = 100)
am.data = glm(formula = am ~ cyl + hp + wt + drat , family = 'binomial', data = input)
, famil
am.data = glm(formula = am ~ cyl + hp + wt , family = 'binomial', data = input)
print(summary(am.data))
am.data = glm(formula = am ~ drat + hp + wt , family = 'binomial', data = input)
print(summary(am.data))
am.data = glm(formula = am ~ cyl + hp + wt , family = 'binomial', data = input)
mtcars
##################################
getwd()
setwd('C:/Users/parth jardosh/Desktop/Desktop/Suven Data Analytics using R/ml datasets')
salaryData <- read.csv("Prostate_Cancer.csv" , stringsAsFactors = F)
salaryData
cancer <- read.csv("Prostate_Cancer.csv" , stringsAsFactors = F)
cancer
str(cancer)
library(gmodels)
install.packages("gmodels")
prc
prc
#install.packages("gmodels")
library(gmodels)
prc
prc <- read.csv("Prostate_Cancer.csv" , stringsAsFactors = F)
str(cancer)
str(prc)
prc <- read.csv("Prostate_Cancer.csv" , stringsAsFactors = F)
str(prc)
#install.packages("gmodels")
library(gmodels)
prc
prc
prc [1]
prc <- prc[-1]
table(prc$diagnosis_result)
table(prc$diagnosis_result)
prc$diagnosis <- factor( prc$diagnosis_result , levels = c("B", "M"), labels = c("Benign", "Malignant"))
print(  prc$diagnosis)
return ((x -min(x)) / (max(x) - min(x))) }
normalize<-function(x) {
return ((x -min(x)) / (max(x) - min(x))) }
head(  prc)
prc_n <- as.data.frame( lapply (prc [2:9],normalize))
head(prc_n)
summary(prc_n$radius)
library(  caTools)
##################################
getwd()
setwd('C:/Users/parth jardosh/Desktop/Desktop/Suven Data Analytics using R/ml datasets')
prc <- read.csv("Prostate_Cancer.csv" , stringsAsFactors = F)
str(prc)
#install.packages("gmodels")
library(gmodels)
prc
prc <- prc[-1]
table(prc$diagnosis_result)
prc$diagnosis <- factor( prc$diagnosis_result , levels = c("B", "M"), labels = c("Benign", "Malignant"))
print(  prc$diagnosis)
normalize<-function(x) {
return ((x -min(x)) / (max(x) - min(x))) }
head(prc)
prc_n <- as.data.frame( lapply (prc [2:9],normalize))
head(prc_n)
summary(prc_n$radius)
library(  caTools)
split <-  sample.split (prc$diagnosis_result ,SplitRatio =  0.8)
prc_train <- subset( prc_n , split ==T)
nrow (prc_train)
prc_test <- subset( prc_n , split ==T)
nrow(prc_test)
prc_train_labels<-subset( prc , split ==F)
nrow(prc_train_labels)
prc_train_labels<-prc_train_labels$diagnosis_result
prc_train_labels
a<-5
##################################
getwd()
setwd('C:/Users/parth jardosh/Desktop/Desktop/Suven Data Analytics using R/ml datasets')
prc <- read.csv("Prostate_Cancer.csv" , stringsAsFactors = F)
str(prc)
#install.packages("gmodels")
library(gmodels)
prc
prc <- prc[-1]
table(prc$diagnosis_result)
prc$diagnosis <- factor( prc$diagnosis_result , levels = c("B", "M"), labels = c("Benign", "Malignant"))
print(  prc$diagnosis)
normalize<-function(x) {
return ((x -min(x)) / (max(x) - min(x))) }
head(prc)
prc_n <- as.data.frame( lapply (prc [2:9],normalize))
head(prc_n)
summary(prc_n$radius)
library(  caTools)
split <-  sample.split (prc$diagnosis_result ,SplitRatio =  0.8)
prc_train <- subset( prc_n , split ==T)
nrow (prc_train)
prc_test <- subset( prc_n , split ==T)
nrow(prc_test)
prc_train_labels<-subset( prc , split ==F)
nrow(prc_train_labels)
prc_train_labels<-prc_train_labels$diagnosis_result
prc_train_labels
prc_test_labels <- subset( prc , split == F)
nrow(prc_test_labels)
prc_test_labels <- prc_test_labels$diagnosis_result
prc_test_labels
library(class)
library(gmodels)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=10)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , class = prc_train_labels , k=10)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=10)
library(class)
library(gmodels)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=10)
print(prc_test_pred)
prc
##################################
getwd()
setwd('C:/Users/parth jardosh/Desktop/Desktop/Suven Data Analytics using R/ml datasets')
prc <- read.csv("Prostate_Cancer.csv" , stringsAsFactors = F)
str(prc)
#install.packages("gmodels")
library(gmodels)
prc
prc <- prc[-1]
table(prc$diagnosis_result)
prc$diagnosis <- factor( prc$diagnosis_result , levels = c("B", "M"), labels = c("Benign", "Malignant"))
print(  prc$diagnosis)
normalize<-function(x) {
return ((x -min(x)) / (max(x) - min(x))) }
head(prc)
prc_n <- as.data.frame( lapply (prc [2:9],normalize))
head(prc_n)
summary(prc_n$radius)
library(  caTools)
split <-  sample.split (prc$diagnosis_result ,SplitRatio =  0.8)
prc_train <- subset( prc_n , split ==T)
nrow (prc_train)
prc_test <- subset( prc_n , split ==T)
nrow(prc_test)
prc_train_labels<-subset( prc , split ==F)
nrow(prc_train_labels)
prc_train_labels<-prc_train_labels$diagnosis_result
prc_train_labels
prc_test_labels <- subset( prc , split == F)
nrow(prc_test_labels)
prc_test_labels <- prc_test_labels$diagnosis_result
prc_test_labels
library(class)
library(gmodels)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=10)
split <-  sample.split (prc$diagnosis_result ,SplitRatio =  0.8)
prc_train <- subset( prc_n , split ==T)
nrow (prc_train)
prc_test <- subset( prc_n , split ==T)
nrow(prc_test)
prc_test <- subset( prc_n , split ==F)
nrow(prc_test)
prc_train_labels<-subset( prc , split ==T)
nrow(prc_train_labels)
prc_train_labels<-prc_train_labels$diagnosis_result
prc_train_labels
prc_test_labels <- subset( prc , split == F)
nrow(prc_test_labels)
prc_test_labels <- prc_test_labels$diagnosis_result
prc_test_labels
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=10)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=100)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=70)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
##################################
getwd()
setwd('C:/Users/parth jardosh/Desktop/Desktop/Suven Data Analytics using R/ml datasets')
prc <- read.csv("Prostate_Cancer.csv" , stringsAsFactors = F)
str(prc)
#install.packages("gmodels")
library(gmodels)
prc
prc <- prc[-1]
table(prc$diagnosis_result)
prc$diagnosis <- factor( prc$diagnosis_result , levels = c("B", "M"), labels = c("Benign", "Malignant"))
print(  prc$diagnosis)
normalize<-function(x) {
return ((x -min(x)) / (max(x) - min(x))) }
head(prc)
prc_n <- as.data.frame( lapply (prc [2:9],normalize))
head(prc_n)
summary(prc_n$radius)
library(  caTools)
split <-  sample.split (prc$diagnosis_result ,SplitRatio =  0.8)
prc_train <- subset( prc_n , split ==T)
nrow (prc_train)
prc_test <- subset( prc_n , split ==F)
nrow(prc_test)
prc_train_labels<-subset( prc , split ==T)
nrow(prc_train_labels)
prc_train_labels<-prc_train_labels$diagnosis_result
prc_train_labels
prc_test_labels <- subset( prc , split == F)
nrow(prc_test_labels)
prc_test_labels <- prc_test_labels$diagnosis_result
prc_test_labels
library(class)
library(gmodels)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=70)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
0###############
prc_train_labels
prc_test_labels <- subset( prc , split == F)
nrow(prc_test_labels)
prc_test_labels <- prc_test_labels$diagnosis_result
prc_test_labels
library(class)
library(gmodels)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=70)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=40)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=70)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=50)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=2)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=5)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=6)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=7)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=4)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=4.5)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=4)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=5)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=6)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=5.5)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=5)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
0###############
##################################
getwd()
setwd('C:/Users/parth jardosh/Desktop/Desktop/Suven Data Analytics using R/ml datasets')
prc <- read.csv("Prostate_Cancer.csv" , stringsAsFactors = F)
str(prc)
#install.packages("gmodels")
library(gmodels)
prc
prc <- prc[-1]
table(prc$diagnosis_result)
prc$diagnosis <- factor( prc$diagnosis_result , levels = c("B", "M"), labels = c("Benign", "Malignant"))
print(  prc$diagnosis)
prc
head(prc)
prc_n <- as.data.frame( lapply (prc [2:9],normalize))
head(prc_n)
summary(prc_n$radius)
library(  caTools)
split <-  sample.split (prc$diagnosis_result ,SplitRatio =  0.8)
prc_train <- subset( prc_n , split ==T)
nrow (prc_train)
prc_test <- subset( prc_n , split ==F)
nrow(prc_test)
prc_train
prc_test
prc_train_labels
prc
prc_train_labels
split
prc
prc_n
prc_test_labels <- subset( prc , split == F)
prc_train_labels<-subset( prc , split ==T)
prc_train_labels
prc_train_labels <- prc_train_labels$diagnosis_result
prc_train_labels
prc_test_labels <- subset( prc , split == F)
nrow(prc_test_labels)
prc_test_labels <- prc_test_labels$diagnosis_result
prc_test_labels
library(class)
library(gmodels)
# Creating Model & Testing
prc_test_pred <- knn (train = prc_train , test =prc_test , cl = prc_train_labels , k=5)
print(prc_test_pred)
CrossTable(x=prc_test_labels,y=prc_test_pred)
library("party")
###############
install.packages("party")
install.packages("rpart.plot")
install.packages("rpart")
install.packages("rpart")
library("party")
print(  readingSkills)
library("caTools")
library("rpart")
library("rpart.plot")
dataset =   readingSkills
sam = sample.split( dataset$age , SplitRatio= 0.70)
print(  sam)
training= subsetd(ataset,sam == T)
testing = subset(dataset,sam == F)
model= rpart (nativeSpeaker ~. ,data =  training)
rpart.plot(model)
model$variable.importance
print(sam)
training= subsetd(ataset,sam == T)
testing = subset(dataset,sam == F)
library("caTools")
library("rpart")
library("rpart.plot")
dataset =   readingSkills
sam = sample.split( dataset$age , SplitRatio= 0.70)
print(sam)
training= subset(dataset,sam == T)
testing = subset(dataset,sam == F)
model= rpart (nativeSpeaker ~ . ,data =  training)
rpart.plot(model)
model$variable.importance
# Predict
result = predict(  model,testing,type = "class")
table(result,testing$nativeSpeaker)
table(result,testing$nativeSpeaker)
model$variable.importance
print(  readingSkills)
library("caTools")
library("rpart")
library("rpart.plot")
dataset =   readingSkills
sam = sample.split( dataset$age , SplitRatio= 0.70)
print(sam)
training= subset(dataset,sam == T)
testing = subset(dataset,sam == F)
testing
training
model= rpart (nativeSpeaker ~ . ,data =  training)
model
# Predict
result = predict(  model , testing ,type = "class" )
result
table(result,testing$nativeSpeaker)
#####################
library(party)
library(randomForest)
print(head(readingSkills))
set.seed(10)
install.packages("randomForest"
)
install.packages("randomForest"
)
library(randomForest)
print(head(readingSkills))
set.seed(10)
output.forest <- randomForest(nativeSpeaker ~ age + shoeSize + score ,
data = readSkills , ntree=1000 )
library(randomForest)
print(head(readingSkills))
set.seed(10)
output.forest <- randomForest(nativeSpeaker ~ age + shoeSize + score ,
data = readSkills , ntree=1000 )
output.forest <- randomForest(nativeSpeaker ~ age + shoeSize + score ,
data = readingSkills , ntree=1000 )
print(output.forest)
plot(output.forest)
varImpPlot(output.forest)
plot(output.forest)
getwd()
setwd('C:/Users/parth jardosh/Desktop/Desktop/Suven Data Analytics using R/ml datasets')
salaryData <- read.csv("MBA_new_data.csv" , stringsAsFactors = F)
salaryData <- read.csv("MBA_data_new.csv" , stringsAsFactors = F)
salaryData
mda_data <- read.csv("MBA_data_new.csv" , stringsAsFactors = F)
mba_data <- read.csv("MBA_data_new.csv" , stringsAsFactors = F)
mba_data
trans <- split(mda_data$Products , mba_data$Customer_Id, "transactions")
getwd()
setwd('C:/Users/parth jardosh/Desktop/Desktop/Suven Data Analytics using R/ml datasets')
mba_data <- read.csv("MBA_data_new.csv" , stringsAsFactors = F)
print(mba_data)
trans <- split(mda_data$Products , mba_data$Customer_Id, "transactions")
library(arules)
install.packages("arules")
library(arules)
rules <- apriori (trans , parameter = list (support = 0.10 , confidence = 0.5 , maxlen = 2, minlen = 2))
print(rules)
rules
inspect(rules)
