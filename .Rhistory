out[3] <-ifelse(length(i)>0, x[i], NA)
out
}
standardFields<-lapply(fieldList, assignFields)
print(standardFields)
(M <-matrix(unlist(standardFields), nrow=length(standardFields), byrow=TRUE))
(txt <-readLines("dalton.txt"))
(I <-grepl("^%", txt))
(dat<-txt[!I])
(fieldList<-strsplit(dat, split = ","))
assignFields<-function(x){
out <-character(3)
i<-grepl("[[:alpha:]]",x)
out[1] <-x[i]
i<-which(as.numeric(x) < 1890)
out[2] <-ifelse(length(i)>0, x[i], NA)
i<-which(as.numeric(x) > 1890)
out[3] <-ifelse(length(i)>0, x[i], NA)
out
}
standardFields<-lapply(fieldList, assignFields)
print(standardFields)
(M <-matrix(unlist(standardFields), nrow=length(standardFields), byrow=TRUE))
(colnames(M) <-c("name","birth","death"))
(daltons<-as.data.frame(M, stringsAsFactors=FALSE))
(txt <-readLines("dalton.txt"))
(I <-grepl("^%", txt))
(dat<-txt[!I])
(fieldList<-strsplit(dat, split = ","))
assignFields<-function(x){
out <-character(3)
i<-grepl("[[:alpha:]]",x)
out[1] <-x[i]
i<-which(as.numeric(x) < 1890)
out[2] <-ifelse(length(i)>0, x[i], NA)
i<-which(as.numeric(x) > 1890)
out[3] <-ifelse(length(i)>0, x[i], NA)
out
}
standardFields<-lapply(fieldList, assignFields)
print(standardFields)
(txt <-readLines("dalton.txt"))
(I <-grepl("^%", txt))
(dat<-txt[!I])
(fieldList<-strsplit(dat, split = ","))
assignFields<-function(x){
out <-character(3)
i<-grepl("[[:alpha:]]",x)
out[1] <-x[i]
i<-which(as.numeric(x) < 1890)
out[2] <-ifelse(length(i)>0, x[i], NA)
i<-which(as.numeric(x) > 1890)
out[3] <-ifelse(length(i)>0, x[i], NA)
out
}
standardFields<-lapply(fieldList, assignFields)
print(standardFields)
(M <-matrix(unlist(standardFields), nrow=length(standardFields), byrow=TRUE))
(colnames(M) <-c("name","birth","death"))
(daltons<-as.data.frame(M, stringsAsFactors=FALSE))
str(daltons)
daltons= transform(daltons,birth= as.numeric(birth),death = as.numeric(death))
print(daltons)
#
###################3
revenue <-c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <-c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
profit <- revenue - expenses
profit
profit <- profit / 1000
profit
profit <- profit * 0.7
profit
profitMargin <- profit / revenue
profitMargin
profitMargin <- ( profit / revenue) * 1000
profitMargin
mean1 <- mean(profit)
mean1
profit > mean1
goodMonths <- subset(profit , profit > mean1)
badMonths <- subset(profit , profit <= mean1)
badMonths
goodMonths
mean1
max(profit)
min(profit)
profitMargin <- ( profit / revenue) * 100000
profitMargin
profitMargin <- round(( profit / revenue) * 100000)
profitMargin
d <-data.frame(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month
)
print(d)
#
###################3
revenue <-c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <-c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
profit <- revenue - expenses
profit <- profit / 1000
profit <- profit * 0.7
profitMargin <- round(( profit / revenue) * 100000)
mean1 <- mean(profit)
goodMonths <- subset(profit , profit > mean1)
badMonths <- subset(profit , profit <= mean1)
max(profit)
min(profit)
d <-data.frame(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month
)
bestMonth <- max(profit)
wprstMonth <- min(profit)
bestMonth
worstMonth
worstMonth <- min(profit)
worstMonth
d <-data.frame(
revenue,
expenses,
profit,
profitafterTax,
profitMargin,
goodMonths,
badMonths,
bestMonth,
worstMonth
)
#
###################3
revenue <-c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <-c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
profit <- revenue - expenses
profit <- profit / 1000
profitafterTax <- profit * 0.7
profitMargin <- round(( profitafterTax / revenue) * 100000)
mean1 <- mean(profitafterTax)
goodMonths <- subset(profitafterTax , profitafterTax > mean1)
badMonths <- subset(profitafterTax , profitafterTax <= mean1)
bestMonth <- max(profit)
worstMonth <- min(profit)
d <-data.frame(
revenue,
expenses,
profit,
profitafterTax,
profitMargin,
goodMonths,
badMonths,
bestMonth,
worstMonth
)
print(d)
d <-data.frame(
revenue,
expenses,
profit,
profitafterTax,
profitMargin,
goodMonths,
badMonths,
#bestMonth,
#worstMonth
)
d <-data.frame(
revenue,
expenses,
profit,
profitafterTax,
profitMargin,
goodMonths,
badMonths,
#bestMonth,
#worstMonth
)
bestMonth <- subset(profitafterTax ,  profitafterTax = max(profitafterTax))
bestMonth <- subset(profitafterTax ,  profitafterTax == max(profitafterTax))
goodMonths <-  profitafterTax > mean1
goodMonths
goodMonths <-  if (profitafterTax > mean1 == TRUE)
goodMonths <-  if ((profitafterTax > mean1) == TRUE)
goodMonths
#
###################3
revenue <-c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <-c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
profit <- revenue - expenses
profit <- profit / 1000
profitafterTax <- profit * 0.7
profitMargin <- round(( profitafterTax / revenue) * 100000)
mean1 <- mean(profitafterTax)
goodMonths <- subset(profitafterTax , profitafterTax > mean1)
badMonths <- subset(profitafterTax , profitafterTax <= mean1)
bestMonth <- subset(profitafterTax ,  profitafterTax == max(profitafterTax))
worstMonth <- min(profit)
d <-data.frame(
revenue,
expenses,
profit,
profitafterTax,
profitMargin,
goodMonths,
badMonths,
#bestMonth,
#worstMonth
)
d <-data.frame(
revenue,
expenses,
profit,
profitafterTax,
profitMargin,
goodMonths,
badMonths,
bestMonth,
worstMonth
)
print(d)
x <- c(21,62,10,53)
labels <- c("London" , "New York" , "Singapore" , "Mumbai")
png(file = "city.jpg")
(piepercent = x / sum(x) * 100)
pie(x , labels =labels , col = c("RED" , "GREEN" , "BLUE" "YELLOW"))
pie(x , labels =labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
legend("bottomleft" , x.pch = 10 , legend = labels . col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
legend("bottomleft" , x.pch = 10 , legend = labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
legend("bottomleft" , x , pch = 10 , legend = labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
x <- c(21,62,10,53)
labels <- c("London" , "New York" , "Singapore" , "Mumbai")
png(file = "city.jpg")
(piepercent = x / sum(x) * 100)
pie(x , labels =labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
legend("bottomleft" , x , pch = 10 , legend = labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
dev.off()
dev.off()
pie(x , labels =labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
x <- c(21,62,10,53)
labels <- c("London" , "New York" , "Singapore" , "Mumbai")
png(file = "city.jpg")
(piepercent = x / sum(x) * 100)
pie(x , labels =labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
legend("bottomleft" , x , pch = 10 , legend = labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
dev.off()
dev.off()
pie(x , labels =labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
x <- c(21,62,10,53)
labels <- c("London" , "New York" , "Singapore" , "Mumbai")
png(file = "city.jpg")
(piepercent = x / sum(x) * 100)
pie(x , labels =labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
legend("bottomleft" , x , pch = 10 , legend = labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
dev.off()
pie(x , labels =labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
dev.off()
pie(x , labels =labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
x <- c(21,62,10,53)
labels <- c("London" , "New York" , "Singapore" , "Mumbai")
png(file = "city.jpg")
(piepercent = x / sum(x) * 100)
pie(x , labels =labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
legend("bottomleft" , x , pch = 10 , legend = labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
dev.off()
dev.off()
pie(x , labels =labels , col = c("RED" , "GREEN" , "BLUE" , "YELLOW"))
png(file = "histogram.png")
#HISTOGRAM
v <- c(47,53,31,58,36,43,22)
png(file = "histogram.png")
hist(v , ylim = c(0 , 5) , xlab = "weight" , ylab = "frequency" , col = "yellow" , border = "blue")
dev.off()
hist(v , ylim = c(0 , 5) , xlab = "weight" , ylab = "frequency" , col = "yellow" , border = "blue")
#timeserie splot
rainfall <- c(112,556,120,600,130,610,140,620,150,630,160,640)
png(file = "timeseries.png")
plot.ts(rainfall , xlab = "2012 rainfall data" , ylab = "meters rainfall" , col = "blue" , main = "rainfall plot")
dev.off()
plot.ts(rainfall , xlab = "2012 rainfall data" , ylab = "meters rainfall" , col = "blue" , main = "rainfall plot")
plot.ts(rainfall , ylim = c( 100, 600) ,xlab = "2012 rainfall data" , ylab = "meters rainfall" , col = "blue" , main = "rainfall plot")
dev.off()
plot.ts(rainfall , ylim = c( 100, 600) ,xlab = "2012 rainfall data" , ylab = "meters rainfall" , col = "blue" , main = "rainfall plot")
plot.ts(rainfall , ylim = c( 100, 600) ,xlab = "2012 rainfall data" , ylab = "meters rainfall" , col = "blue" , main = "rainfall plot")
#timeserie splot
rainfall <- c(112,556,120,600,130,610,140,620,150,630,160,640)
png(file = "timeseries.png")
plot.ts(rainfall , ylim = c( 100, 600) ,xlab = "2012 rainfall data" , ylab = "meters rainfall" , col = "blue" , main = "rainfall plot")
dev.off()
plot.ts(rainfall , ylim = c( 100, 600) ,xlab = "2012 rainfall data" , ylab = "meters rainfall" , col = "blue" , main = "rainfall plot")
dev.off()
plot.ts(rainfall , ylim = c( 100, 600) ,xlab = "2012 rainfall data" , ylab = "meters rainfall" , col = "blue" , main = "rainfall plot")
plot.ts(rainfall , ylim = c( 100, 670) ,xlab = "2012 rainfall data" , ylab = "meters rainfall" , col = "blue" , main = "rainfall plot")
v <- c(7,12,28,3,41)
w <- c(9,14,24,8,50)
q <- c("v" , "w")
png ( file = "line_chart.jpg")
plot(v , type = "o" , col = "blue")
lines(w, type = "o" , col = "red")
legend("topleft" ,  , pch = 15:16+ , col = c("blue", "Red") )
v <- c(7,12,28,3,41)
w <- c(9,14,24,8,50)
q <- c("v" , "w")
png ( file = "line_chart.jpg")
plot(v , type = "o" , col = "blue")
lines(w, type = "o" , col = "red")
legend("topleft" , q , pch = 15:16 , col = c("blue", "Red") )
dev.off()
lines(w, type = "o" , col = "red")
legend("topleft" , q , pch = 15:16 , col = c("blue", "Red") )
lines(w, type = "o" , col = "red")
png ( file = "line_chart.jpg")
plot(v , type = "o" , col = "blue")
lines(w, type = "o" , col = "red")
legend("topleft" , q , pch = 15:16 , col = c("blue", "Red") )
dev.off()
dev.off()
dev.off()
plot(v , type = "o" , col = "blue")
lines(w, type = "o" , col = "red")
legend("topleft" , q , pch = 15:16 , col = c("blue", "Red") )
v <- c(7,12,28,3,41)
w <- c(9,14,24,8,50)
q <- c("v" , "w")
png ( file = "line_chart.jpg")
plot(v , type = "o" , col = "blue")
lines(w, type = "o" , col = "red")
legend("topleft" , q , pch = 15:16 , col = c("blue", "Red") )
dev.off()
dev.off()
plot(v , type = "o" , col = "blue")
lines(w, type = "o" , col = "red")
legend("topleft" , q , pch = 15:16 , col = c("blue", "Red") )
#bar chart
H <- c(7,12,28,3,550)
png(file = "barchart.png")
barplot(H , names,arg = labels , col = c("white" , "green" , "red" , "blue" , "cyan"))
barplot(H , names,arg = labels , col = c("white" , "green" , "red" , "blue" , "cyan") , ylim = c(0,60))
barplot(H , names.arg = labels , col = c("white" , "green" , "red" , "blue" , "cyan") , ylim = c(0,60))
#bar chart
H <- c(7,12,28,3,55)
labels <- C("A" , "b" , "C" , "d" , "e")
png(file = "barchart.png")
labels <- c("A" , "b" , "C" , "d" , "e")
png(file = "barchart.png")
barplot(H , names.arg = labels , col = c("white" , "green" , "red" , "blue" , "cyan") , ylim = c(0,60))
dev.off()
dev.off()
png(file = "barchart.png")
barplot(H , names.arg = labels , col = c("white" , "green" , "red" , "blue" , "cyan") , ylim = c(0,60))
dev.off()
dev.off()
#bar chart
H <- c(7,12,28,3,55)
labels <- c("A" , "b" , "C" , "d" , "e")
png(file = "barchart.png")
barplot(H , names.arg = labels , col = c("white" , "green" , "red" , "blue" , "cyan") , ylim = c(0,60))
dev.off()
barplot(H , names.arg = labels , col = c("white" , "green" , "red" , "blue" , "cyan") , ylim = c(0,60))
source('C:/Users/parth jardosh/Desktop/Desktop/Suven Data Analytics using R/basic.R', echo=TRUE)
#boxplot
data("mtcars")
input <- mtcars[,c("mpg", "cyl")]
input
print(head(input))
png(file = "boxplot.png")
boxplot(mpg~cyl , data = input , ylim = c(5,35) ,
xlab = "number of cylinders" ,
ylab = "mile per gallon" , main = "mileage data")
dev.off()
boxplot(mpg~cyl , data = input , ylim = c(5,35) ,
xlab = "number of cylinders" ,
ylab = "mile per gallon" , main = "mileage data")
boxplot(mpg~cyl , data = input , ylim = c(5,35) ,
xlab = "number of cylinders" ,
ylab = "mile per gallon" , main = "mileage data")
#scatter plot
input <- mtcars [,c('wt', 'mpg')]
png(file = "scatteR_plot.png")
plot( x = input$wt, y = input$mpg,
xlab = "weight",
ylab = "Mileage",
xlim = c(2.5 , 5),
ylim = c(15,30),
main = ("WEight vs MIleage")
)
dev.off()
plot( x = input$wt, y = input$mpg,
xlab = "weight",
ylab = "Mileage",
xlim = c(2.5 , 5),
ylim = c(15,30),
main = ("WEight vs MIleage")
)
##################deliveries.csv operation##############################################
deliveries
getwd()
deliveries <- read.csv("deliveries.csv" , stringsAsFactors = F)
deliveries
str(deliveries)
name <- subset(deliveries, deliveries$wide_runs == max(deliveries$wide_runs))
name
max(deliveries$wide_runs)
deliveries$wide_runs == max(deliveries$wide_runs)
name <- subset(deliveries, deliveries$wide_runs == max(deliveries$wide_runs), split = TRUE)
name
name <- subset(deliveries, deliveries$wide_runs == max(deliveries$wide_runs))
pname <- subset(name, split = TRUE)
pname
name
name <- subset(deliveries, deliveries$wide_runs == max(deliveries$wide_runs))
source('C:/Users/parth jardosh/Desktop/Desktop/Suven Data Analytics using R/basic.R')
getwd()
deliveries <- read.csv("deliveries.csv" , stringsAsFactors = F)
str(deliveries)
name <- subset(deliveries, deliveries$wide_runs == max(deliveries$wide_runs))
write.csv(name , file = "name.csv" , row.names = FALSE)
superover <- subset(deliveries , deliveries$match_id == 10)
numberSO <- count(superover$is_super_over == 1)
numberSO <- count(superover$is_super_over)
superover <- subset(deliveries , deliveries$match_id == 10)
superover
superover <- subset(deliveries , deliveries$match_id == 10 && deliveries$is_super_over == 1)
superover
d
deliveries$match_id == 10 &&
pname <- subset(name, split = TRUE)
superover <- subset(deliveries , deliveries$match_id == 10 && deliveries$is_super_over == 1)
batname <- subset(deliveries, deliveries$total_runs > 6)
batname
write.csv(name , file = "batname.csv" , row.names = FALSE)
batname <- subset(deliveries, deliveries$total_runs > 6)
write.csv(name , file = "batname.csv" , row.names = FALSE)
batsname <- batname$batsman
batsname
name <- unique(subset(deliveries, deliveries$wide_runs == max(deliveries$wide_runs)))
name
name$bowler
matchid25 <- subset(deliveries, deliveries$match_id == 25 )
batsname
batsname <- unique(batname$batsman)
batsname
maxbowl <- subset(matchid25, matchid25$extra_runs == max(matchid25$extra_runs))
maxbowl
matchid25
maxbowl
maxbowl$bowler
maxtotalruns <- subset(deliveries, deliveries$total_runs == max(deliveries$total_runs))
matchid25 <- subset(deliveries, deliveries$match_id == 25 )
maxbowl <- subset(matchid25, matchid25$extra_runs == max(matchid25$extra_runs))
maxbowl$bowler
print(maxtotalruns$batsman +" " + maxtotalruns$bowler +" " + maxtotalruns$non_striker)
print(maxtotalruns$batsman , maxtotalruns$bowler," ", maxtotalruns$non_striker)
print(maxtotalruns$batsman , maxtotalruns$bowler,maxtotalruns$non_striker)
maxtotalruns$batsman
maxtotalruns$bowler
maxtotalruns$non_striker
bowlname <- subsest(deliveries, deliveries$penalty_runs == max(deliveries$penalty_runs))
bowlname <- subset(deliveries, deliveries$penalty_runs == max(deliveries$penalty_runs))
bowlname$bowler
maxtotalruns$batsman
batsman <- subset(deliveries , deliveries$batsman_runs == max(deliveries$batsman_runs))
batsman$batsman
bowlname <- subset(deliveries, deliveries$penalty_runs == max(deliveries$penalty_runs))
bowlname$bowler
matchid25 <- subset(deliveries, deliveries$match_id == 25 )
maxbowl <- subset(matchid25, matchid25$extra_runs == max(matchid25$extra_runs))
maxbowl$bowler
cat(maxtotalruns$batsman , maxtotalruns$bowler,maxtotalruns$non_striker)
batsmanunique <- unique((deliveries$batsman))
batsmanunique
batsmanunique <- unique(subset(deliveries$batsman))
batsmanunique <- unique(subset(deliveries, deliveries$batsman))
for batsman in batsmanunique:
batsmanunique <- unique((deliveries$batsman))
typeof(batsmanunique)
(df <- deliveries %>% group_by(batsman) %>%
summarise(runs = sum(batsman_runs)) %>%
arrange(desc(runs)) %>% filter(runs >3000))
(df <- deliveries %>% group_by(bowler) %>%
summarise(runs = sum(total_runs)) %>%
arrange(runs) %>% filter(runs >3000))
(df <- deliveries %>% group_by(bowler) %>%
summarise(runs = sum(total_runs)) %>%
arrange(runs) %>% filter(runs <3000))
(df <- deliveries %>% group_by(bowler) %>%
summarise(runs = sum(total_runs)) %>%
arrange(runs))
(df <- deliveries %>% group_by(batsman) %>%
summarise(runs = sum(batsman_runs)) %>%
arrange(desc(runs)) %>% filter(runs >3000))
(df <- deliveries %>% group_by(bowler) %>%
summarise(runs = sum(total_runs)) %>%
arrange(runs) %>% filter(runs  > 0))
(df <- deliveries %>% group_by(bowler) %>%
summarise(runs = sum(player_dismissed)) %>%
arrange(runs) %>% filter(runs  > 0))
total_runs
source('C:/Users/parth jardosh/Desktop/Desktop/Suven Data Analytics using R/basic.R')
